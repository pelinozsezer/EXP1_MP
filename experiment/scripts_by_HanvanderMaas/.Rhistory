#shiftjj=base_shift-(AR_range[i]-1)*width/(1+AR_range[i])
shiftii=base_shift+(AR_range[i]*width-height)/(1+AR_range[i])
shiftjj=base_shift-(AR_range[i]*width-height)/(1+AR_range[i])
# put in shift matrix
shift=cbind(rep(c(shiftii,-shiftii),each=n,times=.5*n),rep(c(shiftjj,-shiftjj),each=1,times=n^2/2))
h=(m[2,2]+shift[2,2])-(m[1,2]+shift[1,2])
w=(m[n+1,1]+shift[n+1,1])-(m[n,1]+shift[n,1])
h
w
AR=h/w
print(c(i,AR,1/AR,AR_range[i]))
iteration=iteration+1 # odd figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200) # open png
par(bg=background_color) # background color
# plot odd plot
plot(m[!on,]+shift[!on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off() # close png
iteration=iteration+1 # even figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200)
par(bg=background_color)
# plot even plot
plot(m[on,]+shift[on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off()
}
# make a gif from all the individual plots
Sys.sleep(1)
library(magick)
list.files(path=paste0("plots/"), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=fps,loop=0) %>% # animates, can opt for number of loops
image_write(paste0("plots/Anim.gif")) # write to current dir
beep(2) # when ready (takes a while)
# This code is to create motion quartet stimuli
# in which the aspect ratio changes
setwd("/Users/pelinozsezer/EXP1_MP/experiment/scripts_by_HanvanderMaas")
getwd()
# set working directory to source file location
library(colorRamps)
library(colorspace)
library(beepr)
unlink("plots/*")
nr_of_quartets = 6
n= nr_of_quartets * 2 # number of dots
cex=3 # size of dots
background_color='black'
dot_color= 'red'
maxAR=1.1 # max Aspect ration in hysteresis loop (=1/minAR)
fps = 4 # frames per second in gif
shiftii=.0 # shift in x (set to 0 to e it effect)
shiftjj=.0 # shift in y (set to 0 to e it effect)
m=matrix(0,n^2,2) # matrix with coordinates of equidiatant dots
shift=matrix(0,n^2,2) # shift in x and y coordiantes to make them seperate quartets
counter=1:n^2
for(i in 1:n)
for(j in 1:n)
{
shifti=ifelse(i%%2==1,-shiftii,shiftii)
shiftj=ifelse(j%%2==1,-shiftjj,shiftjj)
shift[n*(i-1)+j,]=c(shifti,shiftj) # make the shift matrix
m[n*(i-1)+j,]=c(i/(n+1),j/(n+1)) # make the m matrix
}
on=matrix(c(T,F),n+1,n)[-(n+1),]
on=as.vector(on) # to seperate then on and off dots
# check configuration
plot(m[on,]+shift[on,],col='blue',cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n')
points(m[!on,]+shift[!on,],col='red',cex=cex,pch=19,bty='n')
plot(m+shift,col='lightgrey',cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n')
text((m+shift)[,1], (m+shift)[,2], counter)
height=(m[2,2]+shift[2,2])-(m[1,2]+shift[1,2])
width=(m[n+1,1]+shift[n+1,1])-(m[n,1]+shift[n,1])
height
width
AR=height/width
steps=5 # number of steps in change of AR (aspect ratio)
AR_range_up=seq(1,maxAR,length=steps)
AR_range_down=seq(1,1/maxAR,length=steps)
AR_range_down=AR_range_down[-1]
AR_range=c(AR_range_up,rev(AR_range_up)[-1],AR_range_down,rev(AR_range_down)[-1])
AR_range
length(AR_range)
base_shift = .125 # to make base square somewhat bigger
iteration=0
for(i in 1:length(AR_range))
{
# shiftii=base_shift+(iii[i]-.25*ii)/1000 # AR change x-coordinate
# shiftjj=base_shift-(iii[i]-.25*ii)/1000 # AR change y-coordinate
#shiftii=base_shift+(AR_range[i]-1)*width/(1+AR_range[i])
#shiftjj=base_shift-(AR_range[i]-1)*width/(1+AR_range[i])
shiftii=base_shift+(AR_range[i]*width-height)/(1+AR_range[i])
shiftjj=base_shift-(AR_range[i]*width-height)/(1+AR_range[i])
# put in shift matrix
shift=cbind(rep(c(shiftii,-shiftii),each=n,times=.5*n),rep(c(shiftjj,-shiftjj),each=1,times=n^2/2))
h=(m[2,2]+shift[2,2])-(m[1,2]+shift[1,2])
w=(m[n+1,1]+shift[n+1,1])-(m[n,1]+shift[n,1])
h
w
AR=h/w
print(c(i,AR,1/AR,AR_range[i]))
iteration=iteration+1 # odd figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200) # open png
par(bg=background_color) # background color
# plot odd plot
plot(m[!on,]+shift[!on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off() # close png
iteration=iteration+1 # even figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200)
par(bg=background_color)
# plot even plot
plot(m[on,]+shift[on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off()
}
# make a gif from all the individual plots
Sys.sleep(1)
library(magick)
list.files(path=paste0("plots/"), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=fps,loop=0) %>% # animates, can opt for number of loops
image_write(paste0("plots/Anim.gif")) # write to current dir
beep(2) # when ready (takes a while)
# This code is to create motion quartet stimuli
# in which the aspect ratio changes
setwd("/Users/pelinozsezer/EXP1_MP/experiment/scripts_by_HanvanderMaas")
getwd()
# set working directory to source file location
library(colorRamps)
library(colorspace)
library(beepr)
unlink("plots/*")
nr_of_quartets = 4
n= nr_of_quartets * 2 # number of dots
cex=3 # size of dots
background_color='black'
dot_color= 'red'
maxAR=1.1 # max Aspect ration in hysteresis loop (=1/minAR)
fps = 4 # frames per second in gif
shiftii=.0 # shift in x (set to 0 to e it effect)
shiftjj=.0 # shift in y (set to 0 to e it effect)
m=matrix(0,n^2,2) # matrix with coordinates of equidiatant dots
shift=matrix(0,n^2,2) # shift in x and y coordiantes to make them seperate quartets
counter=1:n^2
for(i in 1:n)
for(j in 1:n)
{
shifti=ifelse(i%%2==1,-shiftii,shiftii)
shiftj=ifelse(j%%2==1,-shiftjj,shiftjj)
shift[n*(i-1)+j,]=c(shifti,shiftj) # make the shift matrix
m[n*(i-1)+j,]=c(i/(n+1),j/(n+1)) # make the m matrix
}
on=matrix(c(T,F),n+1,n)[-(n+1),]
on=as.vector(on) # to seperate then on and off dots
# check configuration
plot(m[on,]+shift[on,],col='blue',cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n')
points(m[!on,]+shift[!on,],col='red',cex=cex,pch=19,bty='n')
plot(m+shift,col='lightgrey',cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n')
text((m+shift)[,1], (m+shift)[,2], counter)
height=(m[2,2]+shift[2,2])-(m[1,2]+shift[1,2])
width=(m[n+1,1]+shift[n+1,1])-(m[n,1]+shift[n,1])
height
width
AR=height/width
steps=5 # number of steps in change of AR (aspect ratio)
AR_range_up=seq(1,maxAR,length=steps)
AR_range_down=seq(1,1/maxAR,length=steps)
AR_range_down=AR_range_down[-1]
AR_range=c(AR_range_up,rev(AR_range_up)[-1],AR_range_down,rev(AR_range_down)[-1])
AR_range
length(AR_range)
base_shift = .125 # to make base square somewhat bigger
iteration=0
for(i in 1:length(AR_range))
{
# shiftii=base_shift+(iii[i]-.25*ii)/1000 # AR change x-coordinate
# shiftjj=base_shift-(iii[i]-.25*ii)/1000 # AR change y-coordinate
#shiftii=base_shift+(AR_range[i]-1)*width/(1+AR_range[i])
#shiftjj=base_shift-(AR_range[i]-1)*width/(1+AR_range[i])
shiftii=base_shift+(AR_range[i]*width-height)/(1+AR_range[i])
shiftjj=base_shift-(AR_range[i]*width-height)/(1+AR_range[i])
# put in shift matrix
shift=cbind(rep(c(shiftii,-shiftii),each=n,times=.5*n),rep(c(shiftjj,-shiftjj),each=1,times=n^2/2))
h=(m[2,2]+shift[2,2])-(m[1,2]+shift[1,2])
w=(m[n+1,1]+shift[n+1,1])-(m[n,1]+shift[n,1])
h
w
AR=h/w
print(c(i,AR,1/AR,AR_range[i]))
iteration=iteration+1 # odd figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200) # open png
par(bg=background_color) # background color
# plot odd plot
plot(m[!on,]+shift[!on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off() # close png
iteration=iteration+1 # even figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200)
par(bg=background_color)
# plot even plot
plot(m[on,]+shift[on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off()
}
# make a gif from all the individual plots
Sys.sleep(1)
library(magick)
list.files(path=paste0("plots/"), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=fps,loop=0) %>% # animates, can opt for number of loops
image_write(paste0("plots/Anim.gif")) # write to current dir
beep(2) # when ready (takes a while)
# This code is to create motion quartet stimuli
# in which the aspect ratio changes
setwd("/Users/pelinozsezer/EXP1_MP/experiment/scripts_by_HanvanderMaas")
getwd()
# set working directory to source file location
library(colorRamps)
library(colorspace)
library(beepr)
unlink("plots/*")
nr_of_quartets = 3
n= nr_of_quartets * 2 # number of dots
cex=3 # size of dots
background_color='black'
dot_color= 'red'
maxAR=1.1 # max Aspect ration in hysteresis loop (=1/minAR)
fps = 4 # frames per second in gif
shiftii=.0 # shift in x (set to 0 to e it effect)
shiftjj=.0 # shift in y (set to 0 to e it effect)
m=matrix(0,n^2,2) # matrix with coordinates of equidiatant dots
shift=matrix(0,n^2,2) # shift in x and y coordiantes to make them seperate quartets
counter=1:n^2
for(i in 1:n)
for(j in 1:n)
{
shifti=ifelse(i%%2==1,-shiftii,shiftii)
shiftj=ifelse(j%%2==1,-shiftjj,shiftjj)
shift[n*(i-1)+j,]=c(shifti,shiftj) # make the shift matrix
m[n*(i-1)+j,]=c(i/(n+1),j/(n+1)) # make the m matrix
}
on=matrix(c(T,F),n+1,n)[-(n+1),]
on=as.vector(on) # to seperate then on and off dots
# check configuration
plot(m[on,]+shift[on,],col='blue',cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n')
points(m[!on,]+shift[!on,],col='red',cex=cex,pch=19,bty='n')
plot(m+shift,col='lightgrey',cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n')
text((m+shift)[,1], (m+shift)[,2], counter)
height=(m[2,2]+shift[2,2])-(m[1,2]+shift[1,2])
width=(m[n+1,1]+shift[n+1,1])-(m[n,1]+shift[n,1])
height
width
AR=height/width
steps=5 # number of steps in change of AR (aspect ratio)
AR_range_up=seq(1,maxAR,length=steps)
AR_range_down=seq(1,1/maxAR,length=steps)
AR_range_down=AR_range_down[-1]
AR_range=c(AR_range_up,rev(AR_range_up)[-1],AR_range_down,rev(AR_range_down)[-1])
AR_range
length(AR_range)
base_shift = .125 # to make base square somewhat bigger
iteration=0
for(i in 1:length(AR_range))
{
# shiftii=base_shift+(iii[i]-.25*ii)/1000 # AR change x-coordinate
# shiftjj=base_shift-(iii[i]-.25*ii)/1000 # AR change y-coordinate
#shiftii=base_shift+(AR_range[i]-1)*width/(1+AR_range[i])
#shiftjj=base_shift-(AR_range[i]-1)*width/(1+AR_range[i])
shiftii=base_shift+(AR_range[i]*width-height)/(1+AR_range[i])
shiftjj=base_shift-(AR_range[i]*width-height)/(1+AR_range[i])
# put in shift matrix
shift=cbind(rep(c(shiftii,-shiftii),each=n,times=.5*n),rep(c(shiftjj,-shiftjj),each=1,times=n^2/2))
h=(m[2,2]+shift[2,2])-(m[1,2]+shift[1,2])
w=(m[n+1,1]+shift[n+1,1])-(m[n,1]+shift[n,1])
h
w
AR=h/w
print(c(i,AR,1/AR,AR_range[i]))
iteration=iteration+1 # odd figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200) # open png
par(bg=background_color) # background color
# plot odd plot
plot(m[!on,]+shift[!on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off() # close png
iteration=iteration+1 # even figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200)
par(bg=background_color)
# plot even plot
plot(m[on,]+shift[on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off()
}
# make a gif from all the individual plots
Sys.sleep(1)
library(magick)
list.files(path=paste0("plots/"), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=fps,loop=0) %>% # animates, can opt for number of loops
image_write(paste0("plots/Anim.gif")) # write to current dir
beep(2) # when ready (takes a while)
library(colorRamps)
library(colorspace)
library(beepr)
library(magick)
n=8
m=matrix(0,n^2,2)
shift=matrix(0,n^2,2)
for(i in 1:n)
for(j in 1:n)
{
# shifti=ifelse(i%%2==1,-shiftii,shiftii)
# shiftj=ifelse(j%%2==1,-shiftjj,shiftjj)
# shift[n*(i-1)+j,]=c(shifti,shiftj)
m[n*(i-1)+j,]=c(i,j)
}
m=m/(n+1)
x=matrix(c(T,F),n+1,n)[-(n+1),]
x=as.vector(x)
y=!x
mask=matrix(F,n,n)
mask[c(.5*n,.5*n-1),]=T
mask=as.vector(mask)
# x=x&mask
# y=y&mask
p=seq(-1,1,length=.5*n)
posx=matrix(rep(p,each=2),n,n,byrow = T)*matrix(rep(c(-1,1),each=n),n,n)
posy=matrix(rep(p,each=2),n,n,byrow = T)*matrix(rep(c(1,-1)),n,n)
pos=cbind(as.vector(posx),as.vector(posy))
pos=pos/400
shiftii=.01
shiftjj=.01
shift=cbind(rep(c(shiftii,-shiftii),each=n,times=.5*n),rep(c(shiftjj,-shiftjj),each=1,times=n^2/2))
par(bg='black')
plot((m+shift+pos)[x,],col='grey',cex=.5,xlim=0:1,ylim=c(0,max(m)+min(m)),pch=19,axes=F,bty='n')
col=rep(1:(n),each=2)
col='white'
cex=2
iteration=0
ii=2
for(i in 1:ii)
{
iteration=iteration+1
png(paste0("plots/pngplots_",1000+iteration,".png"),
width=9,height=9,units="in",res=200)
par(bg='black')
plot(m[y,]+shift[y,]+pos[y,],col=col,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
#  Sys.sleep(.1)
dev.off()
iteration=iteration+1
png(paste0("plots/pngplots_",1000+iteration,".png"),
width=9,height=9,units="in",res=200)
par(bg='black')
plot(m[x,]+shift[x,]+pos[x,],col=col,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
#Sys.sleep(.1)
dev.off()
}
list.files(path=paste0("plots/"), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4,loop=0) %>% # animates, can opt for number of loops
image_write(paste0("plots/Anim.gif")) # write to current dir
beep(2)
library(colorRamps)
library(colorspace)
library(beepr)
library(magick)
n=8
m=matrix(0,n^2,2)
shift=matrix(0,n^2,2)
for(i in 1:n)
for(j in 1:n)
{
# shifti=ifelse(i%%2==1,-shiftii,shiftii)
# shiftj=ifelse(j%%2==1,-shiftjj,shiftjj)
# shift[n*(i-1)+j,]=c(shifti,shiftj)
m[n*(i-1)+j,]=c(i,j)
}
m=m/(n+1)
x=matrix(c(T,F),n+1,n)[-(n+1),]
x=as.vector(x)
y=!x
mask=matrix(F,n,n)
mask[c(.5*n,.5*n-1),]=T
mask=as.vector(mask)
# x=x&mask
# y=y&mask
p=seq(-1,1,length=.5*n)
posx=matrix(rep(p,each=2),n,n,byrow = T)*matrix(rep(c(-1,1),each=n),n,n)
posy=matrix(rep(p,each=2),n,n,byrow = T)*matrix(rep(c(1,-1)),n,n)
pos=cbind(as.vector(posx),as.vector(posy))
pos=pos/400
shiftii=.01
shiftjj=.01
shift=cbind(rep(c(shiftii,-shiftii),each=n,times=.5*n),rep(c(shiftjj,-shiftjj),each=1,times=n^2/2))
par(bg='black')
plot((m+shift+pos)[x,],col='grey',cex=.5,xlim=0:1,ylim=c(0,max(m)+min(m)),pch=19,axes=F,bty='n')
col=rep(1:(n),each=2)
col='white'
cex=2
iteration=0
ii=2
for(i in 1:ii)
{
iteration=iteration+1
png(paste0("plots/pngplots_",1000+iteration,".png"),
width=9,height=9,units="in",res=200)
par(bg='black')
plot(m[y,]+shift[y,]+pos[y,],col=col,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
#  Sys.sleep(.1)
dev.off()
iteration=iteration+1
png(paste0("plots/pngplots_",1000+iteration,".png"),
width=9,height=9,units="in",res=200)
par(bg='black')
plot(m[x,]+shift[x,]+pos[x,],col=col,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
#Sys.sleep(.1)
dev.off()
}
list.files(path=paste0("plots/"), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=4,loop=0) %>% # animates, can opt for number of loops
image_write(paste0("plots/Anim.gif")) # write to current dir
beep(2)
beep(2)
beep(1)
beep(3)
# This code is to create motion quartet stimuli
# in which the aspect ratio changes
setwd("/Users/pelinozsezer/EXP1_MP/experiment/scripts_by_HanvanderMaas")
getwd()
# set working directory to source file location
library(colorRamps)
library(colorspace)
library(beepr)
unlink("plots/*")
nr_of_quartets = 3
n= nr_of_quartets * 2 # number of dots
cex=2 # size of dots
background_color='black'
dot_color= 'red'
maxAR=1.1 # max Aspect ration in hysteresis loop (=1/minAR)
fps = 4 # frames per second in gif
shiftii=.0 # shift in x (set to 0 to e it effect)
shiftjj=.0 # shift in y (set to 0 to e it effect)
m=matrix(0,n^2,2) # matrix with coordinates of equidiatant dots
shift=matrix(0,n^2,2) # shift in x and y coordiantes to make them seperate quartets
counter=1:n^2
for(i in 1:n)
for(j in 1:n)
{
shifti=ifelse(i%%2==1,-shiftii,shiftii)
shiftj=ifelse(j%%2==1,-shiftjj,shiftjj)
shift[n*(i-1)+j,]=c(shifti,shiftj) # make the shift matrix
m[n*(i-1)+j,]=c(i/(n+1),j/(n+1)) # make the m matrix
}
on=matrix(c(T,F),n+1,n)[-(n+1),]
on=as.vector(on) # to seperate then on and off dots
# check configuration
plot(m[on,]+shift[on,],col='blue',cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n')
points(m[!on,]+shift[!on,],col='red',cex=cex,pch=19,bty='n')
plot(m+shift,col='lightgrey',cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n')
text((m+shift)[,1], (m+shift)[,2], counter)
height=(m[2,2]+shift[2,2])-(m[1,2]+shift[1,2])
width=(m[n+1,1]+shift[n+1,1])-(m[n,1]+shift[n,1])
height
width
AR=height/width
steps=5 # number of steps in change of AR (aspect ratio)
AR_range_up=seq(1,maxAR,length=steps)
AR_range_down=seq(1,1/maxAR,length=steps)
AR_range_down=AR_range_down[-1]
AR_range=c(AR_range_up,rev(AR_range_up)[-1],AR_range_down,rev(AR_range_down)[-1])
AR_range
length(AR_range)
base_shift = .15 # to make base square somewhat bigger
iteration=0
for(i in 1:length(AR_range))
{
# shiftii=base_shift+(iii[i]-.25*ii)/1000 # AR change x-coordinate
# shiftjj=base_shift-(iii[i]-.25*ii)/1000 # AR change y-coordinate
#shiftii=base_shift+(AR_range[i]-1)*width/(1+AR_range[i])
#shiftjj=base_shift-(AR_range[i]-1)*width/(1+AR_range[i])
shiftii=base_shift+(AR_range[i]*width-height)/(1+AR_range[i])
shiftjj=base_shift-(AR_range[i]*width-height)/(1+AR_range[i])
# put in shift matrix
shift=cbind(rep(c(shiftii,-shiftii),each=n,times=.5*n),rep(c(shiftjj,-shiftjj),each=1,times=n^2/2))
h=(m[2,2]+shift[2,2])-(m[1,2]+shift[1,2])
w=(m[n+1,1]+shift[n+1,1])-(m[n,1]+shift[n,1])
h
w
AR=h/w
print(c(i,AR,1/AR,AR_range[i]))
iteration=iteration+1 # odd figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200) # open png
par(bg=background_color) # background color
# plot odd plot
plot(m[!on,]+shift[!on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off() # close png
iteration=iteration+1 # even figure
png(paste0("plots/pngplots_",1000+iteration,".png"),width=9,height=9,units="in",res=200)
par(bg=background_color)
# plot even plot
plot(m[on,]+shift[on,],col=dot_color,cex=cex,xlim=0:1,ylim=0:1,pch=19,axes=F,bty='n',xlab='',ylab='')
dev.off()
}
# make a gif from all the individual plots
Sys.sleep(1)
library(magick)
list.files(path=paste0("plots/"), pattern = '*.png', full.names = TRUE) %>%
image_read() %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=fps,loop=0) %>% # animates, can opt for number of loops
image_write(paste0("plots/Anim.gif")) # write to current dir
beep(2) # when ready (takes a while)
